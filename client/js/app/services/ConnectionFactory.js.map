{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACjC;;AAEF,MAAMC,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;;AAEA,MAAIC,aAAa,IAAjB;AACA,MAAIC,QAAQ,IAAZ;;AAEA;AAEE,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAJH;AAAA;AAAA,sCAMyB;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,sBAAYI,eAAZ,GAA8B,UAACC,CAAD;AAAA,mBAC5Bf,kBAAkBgB,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC,CAD4B;AAAA,WAA9B;;AAGAR,sBAAYS,SAAZ,GAAwB,UAACJ,CAAD,EAAO;AAC7B,gBAAI,CAACX,UAAL,EAAiB;AACfA,2BAAaW,EAAEE,MAAF,CAASC,MAAtB;AACAb,sBAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,yBAAWC,KAAX,GAAmB,YAAW;AAC1B,sBAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,eAFD;AAGD;;AAEDE,oBAAQJ,UAAR;AACD,WAVD;;AAYAM,sBAAYW,OAAZ,GAAsB,UAACN,CAAD,EAAO;AAC3BO,oBAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAf,mBAAOM,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,WAHD;AAID,SAtBM,CAAP;AAuBD;AA9BH;AAAA;AAAA,oCAgCuBrB,UAhCvB,EAgCmC;AAC/BH,eAAOyB,OAAP,CAAe,UAACC,KAAD,EAAW;AACxB,cAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACEvB,WAAW0B,iBAAX,CAA6BH,KAA7B;;AAEFvB,qBAAW2B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACD,SALD;AAMD;AAvCH;AAAA;AAAA,wCAyC2B;AACrB,YAAG5B,UAAH,EAAe;AACXC;AACAD,uBAAa,IAAb;AACH;AACJ;AA9CH;;AAAA;AAAA;AAgDD,CA1DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n    // função autoinvocada - IIFE (Immediately Invoked Function Expression): https://developer.mozilla.org/en-US/docs/Glossary/IIFE\r\n\r\n  const stores = ['negociacoes']\r\n  const version = 4\r\n  const dbName = 'aluraframe'\r\n\r\n  var connection = null\r\n  var close = null\r\n\r\n  return class ConnectionFactory {\r\n\r\n    constructor() {\r\n      throw new Error('Não é possível criar instâncias de ConnectionFactory')\r\n    }\r\n\r\n    static getConnection() {\r\n      return new Promise((resolve, reject) => {\r\n        let openRequest = window.indexedDB.open(dbName, version)\r\n\r\n        openRequest.onupgradeneeded = (e) =>\r\n          ConnectionFactory._createStores(e.target.result)\r\n\r\n        openRequest.onsuccess = (e) => {\r\n          if (!connection) {\r\n            connection = e.target.result\r\n            close = connection.close.bind(connection)\r\n            connection.close = function() {\r\n                throw new Error('Você não pode fechar diretamente a conexão')\r\n            }\r\n          }\r\n\r\n          resolve(connection)\r\n        }\r\n\r\n        openRequest.onerror = (e) => {\r\n          console.log(e.target.error)\r\n          reject(e.target.error.name)\r\n        }\r\n      })\r\n    }\r\n\r\n    static _createStores(connection) {\r\n      stores.forEach((store) => {\r\n        if (connection.objectStoreNames.contains(store))\r\n          connection.deleteObjectStore(store)\r\n\r\n        connection.createObjectStore(store, { autoIncrement: true })\r\n      })\r\n    }\r\n\r\n    static closeConnection() {\r\n        if(connection) {\r\n            close()\r\n            connection = null\r\n        }\r\n    }\r\n  }\r\n})()\r\n"]}