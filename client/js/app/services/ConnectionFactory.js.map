{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AAEXC,gB,GAAa,I;AACbC,W,GAAQ,I;;mCAECC,iB;AAEX,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;0CAEsB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,UAACC,CAAD;AAAA,uBAC5BV,kBAAkBW,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC,CAD4B;AAAA,eAA9B;;AAGAR,0BAAYS,SAAZ,GAAwB,UAACJ,CAAD,EAAO;AAC7B,oBAAI,CAACZ,UAAL,EAAiB;AACfA,+BAAaY,EAAEE,MAAF,CAASC,MAAtB;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAW;AAC1B,0BAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,mBAFD;AAGD;;AAEDE,wBAAQL,UAAR;AACD,eAVD;;AAYAO,0BAAYW,OAAZ,GAAsB,UAACN,CAAD,EAAO;AAC3BO,wBAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAf,uBAAOM,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAHD;AAID,aAtBM,CAAP;AAuBD;;;wCAEoBtB,U,EAAY;AAC/BH,mBAAO0B,OAAP,CAAe,UAACC,KAAD,EAAW;AACxB,kBAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACExB,WAAW2B,iBAAX,CAA6BH,KAA7B;;AAEFxB,yBAAW4B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACD,aALD;AAMD;;;4CAEwB;AACrB,gBAAG7B,UAAH,EAAe;AACXC;AACAD,2BAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes']\r\nconst version = 4\r\nconst dbName = 'aluraframe'\r\n\r\nlet connection = null\r\nlet close = null\r\n\r\nexport class ConnectionFactory {\r\n\r\n  constructor() {\r\n    throw new Error('Não é possível criar instâncias de ConnectionFactory')\r\n  }\r\n\r\n  static getConnection() {\r\n    return new Promise((resolve, reject) => {\r\n      let openRequest = window.indexedDB.open(dbName, version)\r\n\r\n      openRequest.onupgradeneeded = (e) =>\r\n        ConnectionFactory._createStores(e.target.result)\r\n\r\n      openRequest.onsuccess = (e) => {\r\n        if (!connection) {\r\n          connection = e.target.result\r\n          close = connection.close.bind(connection)\r\n          connection.close = function() {\r\n              throw new Error('Você não pode fechar diretamente a conexão')\r\n          }\r\n        }\r\n\r\n        resolve(connection)\r\n      }\r\n\r\n      openRequest.onerror = (e) => {\r\n        console.log(e.target.error)\r\n        reject(e.target.error.name)\r\n      }\r\n    })\r\n  }\r\n\r\n  static _createStores(connection) {\r\n    stores.forEach((store) => {\r\n      if (connection.objectStoreNames.contains(store))\r\n        connection.deleteObjectStore(store)\r\n\r\n      connection.createObjectStore(store, { autoIncrement: true })\r\n    })\r\n  }\r\n\r\n  static closeConnection() {\r\n      if(connection) {\r\n          close()\r\n          connection = null\r\n      }\r\n  }\r\n}\r\n"]}