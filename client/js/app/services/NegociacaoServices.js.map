{"version":3,"sources":["../../app-es6/services/NegociacaoServices.js"],"names":["NegociacaoServices","_http","HttpService","get","then","negociacoes","map","objeto","Negociacao","Date","data","quantidade","valor","catch","console","log","error","Error","Promise","all","obterNegociacaoSemana","obterNegociacaoSemanaAnterior","obterNegociacaoSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","erro","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":";;;;;;IAAMA,kB;AAEJ,gCAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,IAAIC,WAAJ,EAAb;AACD;;;;4CAEuB;AACtB,aAAO,KAAKD,KAAL,CACJE,GADI,CACA,oBADA,EAEJC,IAFI,CAEC,uBAAe;AACnB,eAAOC,YAAYC,GAAZ,CAAgB,UAACC,MAAD;AAAA,iBAAY,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASF,OAAOG,IAAhB,CAAf,EAAsCH,OAAOI,UAA7C,EAAyDJ,OAAOK,KAAhE,CAAZ;AAAA,SAAhB,CAAP;AACD,OAJI,EAKJC,KALI,CAKE,iBAAS;AACdC,gBAAQC,GAAR,CAAYC,KAAZ;AACA,cAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD,OARI,CAAP;AASD;;;oDAE+B;;AAE9B,aAAO,KAAKhB,KAAL,CACJE,GADI,CACA,sBADA,EAEJC,IAFI,CAEC,uBAAe;AACnB,eAAOC,YAAYC,GAAZ,CAAgB,UAACC,MAAD;AAAA,iBAAY,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASF,OAAOG,IAAhB,CAAf,EAAsCH,OAAOI,UAA7C,EAAyDJ,OAAOK,KAAhE,CAAZ;AAAA,SAAhB,CAAP;AACD,OAJI,EAKJC,KALI,CAKE,iBAAS;AACdC,gBAAQC,GAAR,CAAYC,KAAZ;AACA,cAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACD,OARI,CAAP;AASD;;;qDAEgC;;AAE/B,aAAO,KAAKhB,KAAL,CACJE,GADI,CACA,uBADA,EAEJC,IAFI,CAEC,uBAAe;AACnB,eAAOC,YAAYC,GAAZ,CAAgB,UAACC,MAAD;AAAA,iBAAY,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASF,OAAOG,IAAhB,CAAf,EAAsCH,OAAOI,UAA7C,EAAyDJ,OAAOK,KAAhE,CAAZ;AAAA,SAAhB,CAAP;AACD,OAJI,EAKJC,KALI,CAKE,iBAAS;AACdC,gBAAQC,GAAR,CAAYC,KAAZ;AACA,cAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACD,OARI,CAAP;AAUD;;;uCAEkB;;AAEjB,aAAOC,QACJC,GADI,CACA,CACH,KAAKC,qBAAL,EADG,EAEH,KAAKC,6BAAL,EAFG,EAGH,KAAKC,8BAAL,EAHG,CADA,EAMJlB,IANI,CAMC,oBAAY;AAChB,YAAIC,cAAckB,SACbC,MADa,CACN,UAACC,KAAD,EAAQC,OAAR;AAAA,iBAAoBD,MAAME,MAAN,CAAaD,OAAb,CAApB;AAAA,SADM,EACqC,EADrC,EAEbpB,GAFa,CAET;AAAA,iBAAQ,IAAIE,UAAJ,CAAe,IAAIC,IAAJ,CAASmB,KAAKlB,IAAd,CAAf,EAAoCkB,KAAKjB,UAAzC,EAAqDiB,KAAKhB,KAA1D,CAAR;AAAA,SAFS,CAAlB;AAGA,eAAOP,WAAP;AACD,OAXI,EAYJQ,KAZI,CAYE,gBAAQ;AACb,cAAM,IAAII,KAAJ,CAAUY,IAAV,CAAN;AACD,OAdI,CAAP;AAeD;;;6BAEQC,U,EAAY;;AAEnB,aAAOC,kBACJC,aADI,GAEJ5B,IAFI,CAEC;AAAA,eAAc,IAAI6B,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,OAFD,EAGJ9B,IAHI,CAGC;AAAA,eAAO+B,IAAIC,QAAJ,CAAaN,UAAb,CAAP;AAAA,OAHD,EAIJ1B,IAJI,CAIC;AAAA,eAAM,mCAAN;AAAA,OAJD,EAKJS,KALI,CAKE,gBAAQ;AACbC,gBAAQC,GAAR,CAAYc,IAAZ;AACA,cAAM,IAAIZ,KAAJ,CAAU,yCAAV,CAAN;AACD,OARI,CAAP;AAUD;;;4BAEO;;AAEN,aAAOc,kBACJC,aADI,GAEJ5B,IAFI,CAEC;AAAA,eAAc,IAAI6B,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,OAFD,EAGJ9B,IAHI,CAGC;AAAA,eAAO+B,IAAIE,UAAJ,EAAP;AAAA,OAHD,EAIJxB,KAJI,CAIE,gBAAQ;AACbC,gBAAQC,GAAR,CAAYc,IAAZ;AACA,cAAM,IAAIZ,KAAJ,CAAU,uCAAV,CAAN;AACD,OAPI,CAAP;AASD;;;4BAEO;;AAEN,aAAOc,kBACJC,aADI,GAEJ5B,IAFI,CAEC;AAAA,eAAc,IAAI6B,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,OAFD,EAGJ9B,IAHI,CAGC;AAAA,eAAO+B,IAAIG,UAAJ,EAAP;AAAA,OAHD,EAIJlC,IAJI,CAIC;AAAA,eAAM,mCAAN;AAAA,OAJD,EAKJS,KALI,CAKE,gBAAQ;AACbC,gBAAQC,GAAR,CAAYc,IAAZ;AACA,cAAM,IAAIZ,KAAJ,CAAU,+BAAV,CAAN;AACD,OARI,CAAP;AAUD;;;4BAEOsB,U,EAAY;;AAElB,aAAO,KAAKC,gBAAL,GACJpC,IADI,CACC;AAAA,eAAeC,YAAYoC,MAAZ,CAAmB;AAAA,iBACtC,CAACF,WAAWG,IAAX,CAAgB;AAAA,mBACfZ,WAAWa,QAAX,CAAoBC,mBAApB,CADe;AAAA,WAAhB,CADqC;AAAA,SAAnB,CAAf;AAAA,OADD,EAKJ/B,KALI,CAKE,gBAAQ;AACbC,gBAAQC,GAAR,CAAYc,IAAZ;AACA,cAAM,IAAIZ,KAAJ,CAAU,0CAAV,CAAN;AACD,OARI,CAAP;AASD","file":"NegociacaoServices.js","sourcesContent":["class NegociacaoServices {\r\n\r\n  constructor() {\r\n    this._http = new HttpService()\r\n  }\r\n  \r\n  obterNegociacaoSemana() {\r\n    return this._http\r\n      .get('negociacoes/semana')\r\n      .then(negociacoes => {\r\n        return negociacoes.map((objeto) => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        throw new Error('Não foi possível obter as negociações da semana')\r\n      })\r\n  }\r\n\r\n  obterNegociacaoSemanaAnterior() {\r\n      \r\n    return this._http\r\n      .get('negociacoes/anterior')\r\n      .then(negociacoes => {\r\n        return negociacoes.map((objeto) => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        throw new Error('Não foi possível obter as negociações da semana anterior')\r\n      })\r\n  }\r\n\r\n  obterNegociacaoSemanaRetrasada() {\r\n\r\n    return this._http\r\n      .get('negociacoes/retrasada')\r\n      .then(negociacoes => {\r\n        return negociacoes.map((objeto) => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        throw new Error('Não foi possível obter as negociações da semana retrasada')\r\n      })\r\n\r\n  }\r\n\r\n  obterNegociacoes() {\r\n        \r\n    return Promise\r\n      .all([\r\n        this.obterNegociacaoSemana(),\r\n        this.obterNegociacaoSemanaAnterior(),\r\n        this.obterNegociacaoSemanaRetrasada()\r\n      ])\r\n      .then(periodos => {\r\n        let negociacoes = periodos\r\n            .reduce((dados, periodo) => dados.concat(periodo), [])\r\n            .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ))\r\n        return negociacoes\r\n      })\r\n      .catch(erro => {\r\n        throw new Error(erro)\r\n      })\r\n  }\r\n  \r\n  cadastra(negociacao) {\r\n    \r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.adiciona(negociacao))\r\n      .then(() => 'Negociação adicionada com sucesso')\r\n      .catch(erro => {\r\n        console.log(erro)\r\n        throw new Error('Não foi possível adicionar a negociação')\r\n      })\r\n\r\n  }\r\n\r\n  lista() {\r\n        \r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.listaTodos())\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível obter as negociações')\r\n      })\r\n  \r\n  }\r\n\r\n  apaga() {\r\n    \r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.apagaTodos())\r\n      .then(() => 'Negociações apagadas com sucesso!')\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi apagar as negociações')\r\n      })\r\n\r\n  }\r\n\r\n  importa(listaAtual) {\r\n\r\n    return this.obterNegociacoes()\r\n      .then(negociacoes => negociacoes.filter(negociacao =>\r\n        !listaAtual.some(negociacaoExistente =>\r\n          negociacao.isEquals(negociacaoExistente)))\r\n      )\r\n      .catch(erro => {\r\n        console.log(erro)\r\n        throw new Error(\"Não foi possível importar as negociações\")\r\n      })\r\n  }\r\n  \r\n}\r\n"]}